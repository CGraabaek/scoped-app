<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_321937_snc_node.Utils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Utils</name>
        <script><![CDATA[var Utils = Class.create();
Utils.prototype = {
    initialize: function() {},
    // This method queries the table Bridge Scripts and runs the script in the field on the NodeJS instance
    runScript: function(sys_id) {
        var gr = new GlideRecord("x_321937_snc_node_bridge_scripts");
        if (!gr.get(sys_id)) {
            return null;
        }

        var script = gr.script + "";

        var isNative = (gr.getValue("native") == "1") ? true : false;
        // send the script and get the result
        var response = this.postScriptExec(script, isNative);
        // parse the resulting JSON response
        response = JSON.parse(response);
        // write log for executed entries
		this.writeExecutionLog("x_321937_snc_node_bridge_scripts", gr.sys_id + "", script, response, response.message);
        return response;
    },
    // This method handles the running of the script on the NodeJS instance and getting the response if any available
    postScriptExec: function(script, isNative) {
        // this gets the endpoint url from the system properties, it is important to set it
        var endpoint = gs.getProperty("x_321937_snc_node.endpoint");
        var path = isNative ? "process/native" : "process/node";
        var payload = {
            script: script,
        };

        var request = new sn_ws.RESTMessageV2();
        request.setEndpoint(endpoint + path);
        request.setHttpMethod('POST');
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader('Content-Type', 'application/json');
        request.setRequestBody(JSON.stringify(payload));

        var response = request.execute();
		
        return response.getBody();
    },
	writeExecutionLog: function(table, bridgeScriptSysID, executed_script, response, message) {
		//https://dev77606.service-now.com/nav_to.do?uri=x_321937_snc_node_execution_log.do?sys_id=597ae0f54f0f730045ffa88ca310c7cc
		var gr = new GlideRecord("x_321937_snc_node_execution_log");
		gr.newRecord();
		gr.bridge_script = bridgeScriptSysID;
		gr.executed_script = executed_script;
		gr.table = table;
		gr.response = JSON.stringify(response);
		gr.result = message;
		gr.insert();
	},
    type: 'Utils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-08-03 17:47:37</sys_created_on>
        <sys_id>a36d21614f83730045ffa88ca310c7a1</sys_id>
        <sys_mod_count>18</sys_mod_count>
        <sys_name>Utils</sys_name>
        <sys_package display_value="SNC Node Bridge" source="x_321937_snc_node">3f3bad294f43730045ffa88ca310c7ab</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="SNC Node Bridge">3f3bad294f43730045ffa88ca310c7ab</sys_scope>
        <sys_update_name>sys_script_include_a36d21614f83730045ffa88ca310c7a1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-08-04 07:58:37</sys_updated_on>
    </sys_script_include>
</record_update>
